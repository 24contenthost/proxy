name: monorepo
services:
 #  nginx-reverse-proxy:
#    image: nginx:latest
#    restart: always
#    volumes:
#      - ./nginx/conf.d:/etc/nginx/conf.d
#      - ./nginx/cert.pem:/etc/cert.pem
#      - ./nginx/key.pem:/etc/key.pem
#    ports:
#      - "80:80"
#      - "443:443"
#    networks:
#      - photo_network
#    depends_on:
#      - nginx-app
#      - nginx-client

#  traefik:
#    image: "traefik:v3.0"
#    container_name: traefik
#    hostname: traefik
#    command:
#      - --entrypoints.web.address=:80
#      - --entrypoints.websecure.address=:443  # HTTPS
#      - --providers.docker
#      - --providers.docker.exposedByDefault=false
#      - --api
#      - --certificatesresolvers.le.acme.email=pttp79@yahoo.com  # Укажите ваш email
#      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
#      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web  # Используем HTTP для подтверждения
#      - --log.level=DEBUG  # Для диагностики
#      - --accesslog=true
#    ports:
#      - 80:80  # Только HTTP
#      - 443:443
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#      - "./letsencrypt:/letsencrypt"
#    restart: unless-stopped
#    networks:
#      - photo_network
#  nginx-app:
#    image: nginx:latest
#    volumes:
#      - app_data:/var/www
#      - ./api/nginx/conf.d:/etc/nginx/conf.d
#      - ./acme_challenges_app:/var/www/.well-known/acme-challenge  # Монтируем директорию для ACME challenge файлов
#    depends_on:
#      - app
#    ports:
#      - 8000:8000
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.nginx-app.rule=Host(`api.24contenthost.ru`)"
#      #- "traefik.http.routers.nginx-app.entrypoints=web"
#      - "traefik.http.routers.nginx-app.entrypoints=websecure"  # HTTPS
#      - "traefik.http.routers.nginx-app.tls.certresolver=le"  # Указываем Let's Encrypt
#      - "traefik.http.services.nginx-app.loadbalancer.server.port=8000"
#    networks:
#        - photo_network


#  app:
#    build:
#      context: ../../api
#      dockerfile: ../_docker/production/api/Dockerfile
#    environment:
#      - APP_KEY=$APP_KEY
#      - APP_NAME=$APP_NAME
#      - APP_ENV=$APP_ENV
#      - APP_URL=$APP_URL
#      - FRONTEND_URL=$FRONTEND_URL
#      - SESSION_DOMAIN=$SESSION_DOMAIN
#      - SANCTUM_STATEFUL_DOMAINS=$SANCTUM_STATEFUL_DOMAINS
#      - DB_CONNECTION=$DB_CONNECTION
#      - DB_HOST=$DB_HOST
#      - DB_PORT=$DB_PORT
#      - DB_DATABASE=$DB_DATABASE
#      - DB_USERNAME=$DB_USERNAME
#      - DB_PASSWORD=$DB_PASSWORD
#      - APP_DEBUG=$APP_DEBUG
#    volumes:
#      - app_data:/var/www
#    depends_on:
#      - db
#    networks:
#      - photo_network
  nginx-client:
    image: nginx:latest
    volumes:
      - client_data:/var/www
      - ./client/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - client
    ports:
      - 8080:8080
    networks:
      - monorepo_network

  client:
    build:
      context: ../client
      dockerfile: client/Dockerfile
      args:
        VITE_BASE_URL: ${VITE_BASE_URL}
    volumes:
      - client_data:/var/www
    networks:
      - photo_network
    ports:
    - "4173:4173"
    environment:
      NODE_ENV: ${NODE_ENV}
      VITE_BASE_URL: ${VITE_BASE_URL}


  db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - photo_network

networks:
  monorepo_network:
    driver: bridge

volumes:
 # app_data:
  client_data:
  mysql_data:
